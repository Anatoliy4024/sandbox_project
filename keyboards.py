
from calendar_reserve import reserved_date
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import calendar

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def to_superscript(num_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Ü–∏—Ñ—Ä –≤ –Ω–∞–¥—Å—Ç—Ä–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã."""
    superscript_map = str.maketrans('0123456789', '‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ')
    return num_str.translate(superscript_map)


def generate_month_name(month, language):
    months = {
        'en': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    'ru': ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
    'es': ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
    'fr': ["Jan", "F√©v", "Mar", "Avr", "Mai", "Juin", "Juil", "Ao√ª", "Sep", "Oct", "Nov", "D√©c"],
    'uk': ["–°—ñ—á", "–õ—é—Ç", "–ë–µ—Ä", "–ö–≤—ñ", "–¢—Ä–∞", "–ß–µ—Ä", "–õ–∏–ø", "–°–µ—Ä", "–í–µ—Ä", "–ñ–æ–≤", "–õ–∏—Å", "–ì—Ä—É"],
    'pl': ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Pa≈∫", "Lis", "Gru"],
    'de': ["Jan", "Feb", "M√§r", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
    'it': ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"]
    }
    return months[language][month - 1]


def generate_calendar_keyboard(month_offset=0, language='en'):
    today = datetime.today()
    base_month = today.month + month_offset
    base_year = today.year

    if base_month > 12:
        base_month -= 12
        base_year += 1
    elif base_month < 1:
        base_month += 12
        base_year -= 1

    first_of_month = datetime(base_year, base_month, 1)
    last_day = calendar.monthrange(first_of_month.year, first_of_month.month)[1]
    last_of_month = first_of_month.replace(day=last_day)

    month_name = generate_month_name(first_of_month.month, language)

    days_of_week = {
        'en': ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
        'ru': ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"],
        'es': ["Lun", "Mar", "Mi√©", "Jue", "Vie", "S√°b", "Dom"],
        'fr': ["Lun", "Mar", "Mer", "Jeu", "Ven", "Sam", "Dim"],
        'uk': ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"],
        'pl': ["Pon", "Wt", "≈ör", "Czw", "PiƒÖ", "Sob", "Niedz"],
        'de': ["Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"],
        'it': ["Lun", "Mar", "Mer", "Gio", "Ven", "Sab", "Dom"]
    }

    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–Ω–æ–ø–æ–∫
    calendar_buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É
    calendar_buttons = [[InlineKeyboardButton(day, callback_data='none')] for day in days_of_week[language]]

    start_weekday = first_of_month.weekday()
    current_date = first_of_month

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–Ω—è–º–∏ –º–µ—Å—è—Ü–∞
    for _ in range(5):
        for day in range(len(calendar_buttons)):
            if current_date.day == 1 and day < start_weekday:
                calendar_buttons[day].append(InlineKeyboardButton(" ", callback_data='none'))
            elif current_date > last_of_month:
                calendar_buttons[day].append(InlineKeyboardButton(" ", callback_data='none'))
            else:
                logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã: {current_date}")

                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ reserved_date –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –¥–∞—Ç—É
                if current_date <= today or reserved_date(current_date):
                    logging.info(f"–î–∞—Ç–∞ {current_date.date()} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –ø—Ä–æ—à–ª–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è üîª")
                    day_text = to_superscript(str(current_date.day))
                    calendar_buttons[day].append(InlineKeyboardButton(f"üîª {day_text}", callback_data='none'))
                else:
                    calendar_buttons[day].append(InlineKeyboardButton(f" {current_date.day}",
                                                                      callback_data=f'date_{current_date.strftime("%Y-%m-%d")}'))
                current_date += timedelta(days=1)

    prev_month_button = InlineKeyboardButton("<", callback_data=f"prev_month_{month_offset - 1}") if month_offset > -1 else InlineKeyboardButton(" ", callback_data="none")
    next_month_button = InlineKeyboardButton(">", callback_data=f"next_month_{month_offset + 1}") if month_offset < 2 else InlineKeyboardButton(" ", callback_data="none")
    month_name_button = InlineKeyboardButton(f"{month_name} {first_of_month.year}", callback_data="none")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
    calendar_buttons.append([prev_month_button, month_name_button, next_month_button])

    return InlineKeyboardMarkup(calendar_buttons)

def generate_time_selection_keyboard(language, stage='start', start_time=None):
    start_time_dt = datetime.strptime('08:00', '%H:%M')
    end_time_dt = datetime.strptime('22:00', '%H:%M')

    time_buttons = []
    current_time = start_time_dt

    while current_time <= end_time_dt:
        time_str = current_time.strftime('%H:%M')
        if stage == 'end' and start_time:
            start_time_dt = datetime.strptime(start_time, '%H:%M')
            if current_time < start_time_dt + timedelta(hours=2):
                time_buttons.append(InlineKeyboardButton(f"üîª {time_str}", callback_data='none'))
            else:
                time_buttons.append(InlineKeyboardButton(f" {time_str}", callback_data=f'time_{time_str}'))
        else:
            if current_time >= datetime.strptime('20:30', '%H:%M'):
                time_buttons.append(InlineKeyboardButton(f"üîª {time_str}", callback_data='none'))
            else:
                time_buttons.append(InlineKeyboardButton(f" {time_str}", callback_data=f'time_{time_str}'))
        current_time += timedelta(minutes=30)

    num_buttons_per_row = 3
    rows = [time_buttons[i:i + num_buttons_per_row] for i in range(0, len(time_buttons), num_buttons_per_row)]

    time_selection_headers = {
        'start': {
            'en': 'Planning to start around...',
            'ru': '–ü–ª–∞–Ω–∏—Ä—É—é –Ω–∞—á–∞—Ç—å –≤...',
            'es': 'Planeo comenzar alrededor de...',
            'fr': 'Je pr√©vois de commencer vers...',
            'uk': '–ü–ª–∞–Ω—É—é –ø–æ—á–∞—Ç–∏ –æ...',
            'pl': 'Planujƒô rozpoczƒÖƒá oko≈Ço...',
            'de': 'Ich plane zu beginnen um...',
            'it': 'Prevedo di iniziare intorno alle...'
        },
        'end': {
            'en': 'Planning to end around...',
            'ru': '–ü–ª–∞–Ω–∏—Ä—É—é –æ–∫–æ–Ω—á–∞–Ω–∏–µ –æ–∫–æ–ª–æ...',
            'es': 'Planeo terminar alrededor de...',
            'fr': 'Je pr√©vois de terminer vers...',
            'uk': '–ü–ª–∞–Ω—É—é –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ –æ...',
            'pl': 'Planujƒô zako≈Ñczyƒá oko≈Ço...',
            'de': 'Ich plane zu beenden um...',
            'it': 'Prevedo di finire intorno alle...'
        }
    }
    selection_text = time_selection_headers[stage].get(language, "Select start and end time (minimum duration 2 hours)")

    keyboard = [
        [InlineKeyboardButton(selection_text, callback_data='none')]
    ] + rows

    return InlineKeyboardMarkup(keyboard)

def language_selection_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("üá¨üáß EN", callback_data='lang_en'),
            InlineKeyboardButton("üá™üá∏ ES", callback_data='lang_es'),
            InlineKeyboardButton("üáÆüáπ IT", callback_data='lang_it'),
            InlineKeyboardButton("üá´üá∑ FR", callback_data='lang_fr')
        ],
        [
            InlineKeyboardButton("üá∫üá¶ UA", callback_data='lang_uk'),
            InlineKeyboardButton("üáµüá± PL", callback_data='lang_pl'),
            InlineKeyboardButton("üá©üá™ DE", callback_data='lang_de'),
            InlineKeyboardButton("üá∑üá∫ RU", callback_data='lang_ru')

        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def yes_no_keyboard(language):
    texts = {
        'en': {'yes': 'Yes', 'no': 'No'},
        'ru': {'yes': '–î–∞', 'no': '–ù–∞–∑–∞–¥'},
        'es': {'yes': 'S√≠', 'no': 'No'},
        'fr': {'yes': 'Oui', 'no': 'Non'},
        'uk': {'yes': '–¢–∞–∫', 'no': '–ù–∞–∑–∞–¥'},
        'pl': {'yes': 'Tak', 'no': 'Nie'},
        'de': {'yes': 'Ja', 'no': 'Nein'},
        'it': {'yes': 'S√¨', 'no': 'No'}
    }

    keyboard = [
        [
            InlineKeyboardButton(texts[language]['yes'], callback_data='yes'),
            InlineKeyboardButton(texts[language]['no'], callback_data='no')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def generate_person_selection_keyboard(language):
    person_buttons = [InlineKeyboardButton(f" {i}", callback_data=f'person_{i}') for i in range(2, 22)]
    num_buttons_per_row = 5
    rows = [person_buttons[i:i + num_buttons_per_row] for i in range(0, len(person_buttons), num_buttons_per_row)]
    return InlineKeyboardMarkup(rows)

def generate_party_styles_keyboard(language):
    styles = {
        'en': [
            ("Corporate", "Breakfast on the beach"),
            ("Gender reveal", "Dinner by candlelight"),
            ("Romantic meeting", "Wedding anniversary"),
            ("Child's birthday", "Bachelorette party"),
            ("Adult's birthday", "Gift certificate")
        ],
        'ru': [
            ("–î–µ–≤–∏—á–Ω–∏–∫", "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç—Ä–µ—á–∞"),
            ("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤", "–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"),
            ("–†–∞—Å–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–∞", "–í–∑—Ä–æ—Å–ª—ã–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"),
            ("–ì–æ–¥–æ–≤—â–∏–Ω–∞ —Å–≤–∞–¥—å–±—ã", "–î–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"),
            ("–£–∂–∏–Ω –ø—Ä–∏ —Å–≤–µ—á–∞—Ö", "–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –ø–ª—è–∂–µ")
        ],
        'es': [
            ("Cena de empressa", "Cena a la luz de las velas"),
            ("Cumplea√±os adulto", "Tarjeta de regalo"),
            ("Encuentro rom√°ntico", "Desayuno en la playa"),
            ("Aniversario de bodas", "Despedida de soltera"),
            ("Revelaci√≥n de sexo", "Cumplea√±os infantil")
        ],
        'fr': [
            ("Corporatif", "Enterrement de vie de jeune fille"),
            ("Certificat cadeau", "Petit d√©jeuner sur la plage"),
            ("Anniversaire adulte", "Anniversaire de mariage"),
            ("R√©v√©lation de sexe", "D√Æner aux chandelles"),
            ("Rencontre romantique", "Anniversaire d'enfant")        ],
        'uk': [
            ("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤", "–î–æ—Ä–æ—Å–ª–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"),
            ("–î—ñ–≤–∏—á-–≤–µ—á—ñ—Ä", "–ü–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç"),
            ("–†–æ–∑–∫—Ä–∏—Ç—Ç—è —Å—Ç–∞—Ç—ñ", "–î–∏—Ç—è—á–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"),
            ("–†—ñ—á–Ω–∏—Ü—è –≤–µ—Å—ñ–ª–ª—è", "–†–æ–º–∞–Ω—Ç–∏—á–Ω–∞ –∑—É—Å—Ç—Ä—ñ—á"),
            ("–°–Ω—ñ–¥–∞–Ω–æ–∫ –Ω–∞ –ø–ª—è–∂—ñ", "–í–µ—á–µ—Ä—è –ø—Ä–∏ —Å–≤—ñ—á–∫–∞—Ö")        ],
        'pl': [
            ("Korporacyjny", "Kolacja przy ≈õwiecach"),
            ("Bon upominkowy", "Romantyczne spotkanie"),
            ("Rocznica ≈õlubu", "Dzieciƒôce urodziny"),
            ("Ujawnienie p≈Çci", "≈öniadanie na pla≈ºy"),
            ("Doros≈Çe urodziny", "Wiecz√≥r panie≈Ñski")
        ],
        'de': [
            ("Jubil√§um", "Junggesellinnenabschied"),
            ("Firmenfeier", "Abendessen bei Kerzenschein"),
            ("Sternenabend", "Geschlechtsenth√ºllung"),
            ("Geschenkgutschein", "Romantisches Treffen"),
            ("Kindergeburtstag", "Fr√ºhst√ºck am Strand")
        ],
        'it': [
            ("Corporativo", "Festa di addio al nubilato"),
            ("Incontro romantico", "Anniversario di matrimonio"),
            ("Certificato regalo", "Colazione sulla spiaggia"),
            ("Rivelazione del sesso", "Compleanno dell'adulto"),
            ("Cena a lume di candela", "Compleanno del bambino")
        ]
    }

    keyboard = []
    for style_pair in styles[language]:
        keyboard.append([InlineKeyboardButton(style_pair[0], callback_data=f'style_{style_pair[0].strip("üü¢ ")}'),
                         InlineKeyboardButton(style_pair[1], callback_data=f'style_{style_pair[1].strip("üü¢ ")}')])

    return InlineKeyboardMarkup(keyboard)